Grammar

    0 $accept: program $end

    1 program: program declaration stmt_list '\n'
    2        | %empty

    3 declaration: "decl" decls "enddecl"

    4 decls: decls decl ';'
    5      | decl ';'

    6 decl: INT ID
    7     | INT ID '[' NUM ']'
    8     | BOOL ID

    9 stmt_list: stmt_list stmt ';'
   10          | stmt ';'

   11 stmt: ID ASGN expr
   12     | READ '(' ID ')'
   13     | WRITE '(' expr ')'
   14     | IF '(' expr ')' THEN stmt_list ENDIF
   15     | IF '(' expr ')' THEN stmt_list ELSE stmt_list ENDIF
   16     | WHILE '(' expr ')' THEN stmt_list ENDWHILE

   17 expr: NUM
   18     | ID
   19     | expr PLUS expr
   20     | expr MINUS expr
   21     | expr MUL expr
   22     | expr DIV expr
   23     | expr L expr
   24     | expr G expr
   25     | expr LE expr
   26     | expr GE expr
   27     | expr EQ expr
   28     | expr NE expr
   29     | '(' expr ')'


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 1
'(' (40) 12 13 14 15 16 29
')' (41) 12 13 14 15 16 29
';' (59) 4 5 9 10
'[' (91) 7
']' (93) 7
error (256)
MUL (258) 21
PLUS (259) 19
MINUS (260) 20
DIV (261) 22
READ (262) 12
WRITE (263) 13
ASGN (264) 11
IF (265) 14 15
THEN (266) 14 15 16
ELSE (267) 15
ENDIF (268) 14 15
L (269) 23
G (270) 24
LE (271) 25
GE (272) 26
NE (273) 28
EQ (274) 27
WHILE (275) 16
ENDWHILE (276) 16
BOOL (277) 8
INT (278) 6 7
NUM (279) 7 17
ID (280) 6 7 8 11 12 18
"decl" (281) 3
"enddecl" (282) 3


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
program (35)
    on left: 1 2, on right: 0 1
declaration (36)
    on left: 3, on right: 1
decls (37)
    on left: 4 5, on right: 3 4
decl (38)
    on left: 6 7 8, on right: 4 5
stmt_list (39)
    on left: 9 10, on right: 1 9 14 15 16
stmt (40)
    on left: 11 12 13 14 15 16, on right: 9 10
expr (41)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29, on right: 11 13
    14 15 16 19 20 21 22 23 24 25 26 27 28 29


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . declaration stmt_list '\n'

    $end    shift, and go to state 2
    "decl"  shift, and go to state 3

    declaration  go to state 4


State 2

    0 $accept: program $end .

    $default  accept


State 3

    3 declaration: "decl" . decls "enddecl"

    BOOL  shift, and go to state 5
    INT   shift, and go to state 6

    decls  go to state 7
    decl   go to state 8


State 4

    1 program: program declaration . stmt_list '\n'

    READ   shift, and go to state 9
    WRITE  shift, and go to state 10
    IF     shift, and go to state 11
    WHILE  shift, and go to state 12
    ID     shift, and go to state 13

    stmt_list  go to state 14
    stmt       go to state 15


State 5

    8 decl: BOOL . ID

    ID  shift, and go to state 16


State 6

    6 decl: INT . ID
    7     | INT . ID '[' NUM ']'

    ID  shift, and go to state 17


State 7

    3 declaration: "decl" decls . "enddecl"
    4 decls: decls . decl ';'

    BOOL       shift, and go to state 5
    INT        shift, and go to state 6
    "enddecl"  shift, and go to state 18

    decl  go to state 19


State 8

    5 decls: decl . ';'

    ';'  shift, and go to state 20


State 9

   12 stmt: READ . '(' ID ')'

    '('  shift, and go to state 21


State 10

   13 stmt: WRITE . '(' expr ')'

    '('  shift, and go to state 22


State 11

   14 stmt: IF . '(' expr ')' THEN stmt_list ENDIF
   15     | IF . '(' expr ')' THEN stmt_list ELSE stmt_list ENDIF

    '('  shift, and go to state 23


State 12

   16 stmt: WHILE . '(' expr ')' THEN stmt_list ENDWHILE

    '('  shift, and go to state 24


State 13

   11 stmt: ID . ASGN expr

    ASGN  shift, and go to state 25


State 14

    1 program: program declaration stmt_list . '\n'
    9 stmt_list: stmt_list . stmt ';'

    READ   shift, and go to state 9
    WRITE  shift, and go to state 10
    IF     shift, and go to state 11
    WHILE  shift, and go to state 12
    ID     shift, and go to state 13
    '\n'   shift, and go to state 26

    stmt  go to state 27


State 15

   10 stmt_list: stmt . ';'

    ';'  shift, and go to state 28


State 16

    8 decl: BOOL ID .

    $default  reduce using rule 8 (decl)


State 17

    6 decl: INT ID .
    7     | INT ID . '[' NUM ']'

    '['  shift, and go to state 29

    $default  reduce using rule 6 (decl)


State 18

    3 declaration: "decl" decls "enddecl" .

    $default  reduce using rule 3 (declaration)


State 19

    4 decls: decls decl . ';'

    ';'  shift, and go to state 30


State 20

    5 decls: decl ';' .

    $default  reduce using rule 5 (decls)


State 21

   12 stmt: READ '(' . ID ')'

    ID  shift, and go to state 31


State 22

   13 stmt: WRITE '(' . expr ')'

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 35


State 23

   14 stmt: IF '(' . expr ')' THEN stmt_list ENDIF
   15     | IF '(' . expr ')' THEN stmt_list ELSE stmt_list ENDIF

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 36


State 24

   16 stmt: WHILE '(' . expr ')' THEN stmt_list ENDWHILE

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 37


State 25

   11 stmt: ID ASGN . expr

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 38


State 26

    1 program: program declaration stmt_list '\n' .

    $default  reduce using rule 1 (program)


State 27

    9 stmt_list: stmt_list stmt . ';'

    ';'  shift, and go to state 39


State 28

   10 stmt_list: stmt ';' .

    $default  reduce using rule 10 (stmt_list)


State 29

    7 decl: INT ID '[' . NUM ']'

    NUM  shift, and go to state 40


State 30

    4 decls: decls decl ';' .

    $default  reduce using rule 4 (decls)


State 31

   12 stmt: READ '(' ID . ')'

    ')'  shift, and go to state 41


State 32

   17 expr: NUM .

    $default  reduce using rule 17 (expr)


State 33

   18 expr: ID .

    $default  reduce using rule 18 (expr)


State 34

   29 expr: '(' . expr ')'

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 42


State 35

   13 stmt: WRITE '(' expr . ')'
   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr

    MUL    shift, and go to state 43
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    DIV    shift, and go to state 46
    L      shift, and go to state 47
    G      shift, and go to state 48
    LE     shift, and go to state 49
    GE     shift, and go to state 50
    NE     shift, and go to state 51
    EQ     shift, and go to state 52
    ')'    shift, and go to state 53


State 36

   14 stmt: IF '(' expr . ')' THEN stmt_list ENDIF
   15     | IF '(' expr . ')' THEN stmt_list ELSE stmt_list ENDIF
   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr

    MUL    shift, and go to state 43
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    DIV    shift, and go to state 46
    L      shift, and go to state 47
    G      shift, and go to state 48
    LE     shift, and go to state 49
    GE     shift, and go to state 50
    NE     shift, and go to state 51
    EQ     shift, and go to state 52
    ')'    shift, and go to state 54


State 37

   16 stmt: WHILE '(' expr . ')' THEN stmt_list ENDWHILE
   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr

    MUL    shift, and go to state 43
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    DIV    shift, and go to state 46
    L      shift, and go to state 47
    G      shift, and go to state 48
    LE     shift, and go to state 49
    GE     shift, and go to state 50
    NE     shift, and go to state 51
    EQ     shift, and go to state 52
    ')'    shift, and go to state 55


State 38

   11 stmt: ID ASGN expr .
   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr

    MUL    shift, and go to state 43
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    DIV    shift, and go to state 46
    L      shift, and go to state 47
    G      shift, and go to state 48
    LE     shift, and go to state 49
    GE     shift, and go to state 50
    NE     shift, and go to state 51
    EQ     shift, and go to state 52

    $default  reduce using rule 11 (stmt)


State 39

    9 stmt_list: stmt_list stmt ';' .

    $default  reduce using rule 9 (stmt_list)


State 40

    7 decl: INT ID '[' NUM . ']'

    ']'  shift, and go to state 56


State 41

   12 stmt: READ '(' ID ')' .

    $default  reduce using rule 12 (stmt)


State 42

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr
   29     | '(' expr . ')'

    MUL    shift, and go to state 43
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    DIV    shift, and go to state 46
    L      shift, and go to state 47
    G      shift, and go to state 48
    LE     shift, and go to state 49
    GE     shift, and go to state 50
    NE     shift, and go to state 51
    EQ     shift, and go to state 52
    ')'    shift, and go to state 57


State 43

   21 expr: expr MUL . expr

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 58


State 44

   19 expr: expr PLUS . expr

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 59


State 45

   20 expr: expr MINUS . expr

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 60


State 46

   22 expr: expr DIV . expr

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 61


State 47

   23 expr: expr L . expr

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 62


State 48

   24 expr: expr G . expr

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 63


State 49

   25 expr: expr LE . expr

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 64


State 50

   26 expr: expr GE . expr

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 65


State 51

   28 expr: expr NE . expr

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 66


State 52

   27 expr: expr EQ . expr

    NUM  shift, and go to state 32
    ID   shift, and go to state 33
    '('  shift, and go to state 34

    expr  go to state 67


State 53

   13 stmt: WRITE '(' expr ')' .

    $default  reduce using rule 13 (stmt)


State 54

   14 stmt: IF '(' expr ')' . THEN stmt_list ENDIF
   15     | IF '(' expr ')' . THEN stmt_list ELSE stmt_list ENDIF

    THEN  shift, and go to state 68


State 55

   16 stmt: WHILE '(' expr ')' . THEN stmt_list ENDWHILE

    THEN  shift, and go to state 69


State 56

    7 decl: INT ID '[' NUM ']' .

    $default  reduce using rule 7 (decl)


State 57

   29 expr: '(' expr ')' .

    $default  reduce using rule 29 (expr)


State 58

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   21     | expr MUL expr .
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr

    $default  reduce using rule 21 (expr)


State 59

   19 expr: expr . PLUS expr
   19     | expr PLUS expr .
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr

    MUL  shift, and go to state 43
    DIV  shift, and go to state 46

    $default  reduce using rule 19 (expr)


State 60

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   20     | expr MINUS expr .
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr

    MUL  shift, and go to state 43
    DIV  shift, and go to state 46

    $default  reduce using rule 20 (expr)


State 61

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   22     | expr DIV expr .
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr

    $default  reduce using rule 22 (expr)


State 62

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   23     | expr L expr .
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr

    MUL    shift, and go to state 43
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    DIV    shift, and go to state 46

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 63

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   24     | expr G expr .
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr

    MUL    shift, and go to state 43
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    DIV    shift, and go to state 46

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 64

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   25     | expr LE expr .
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr

    MUL    shift, and go to state 43
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    DIV    shift, and go to state 46

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 25 (expr)


State 65

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   26     | expr GE expr .
   27     | expr . EQ expr
   28     | expr . NE expr

    MUL    shift, and go to state 43
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    DIV    shift, and go to state 46

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 26 (expr)


State 66

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   28     | expr . NE expr
   28     | expr NE expr .

    MUL    shift, and go to state 43
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    DIV    shift, and go to state 46

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 28 (expr)


State 67

   19 expr: expr . PLUS expr
   20     | expr . MINUS expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . L expr
   24     | expr . G expr
   25     | expr . LE expr
   26     | expr . GE expr
   27     | expr . EQ expr
   27     | expr EQ expr .
   28     | expr . NE expr

    MUL    shift, and go to state 43
    PLUS   shift, and go to state 44
    MINUS  shift, and go to state 45
    DIV    shift, and go to state 46

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 27 (expr)


State 68

   14 stmt: IF '(' expr ')' THEN . stmt_list ENDIF
   15     | IF '(' expr ')' THEN . stmt_list ELSE stmt_list ENDIF

    READ   shift, and go to state 9
    WRITE  shift, and go to state 10
    IF     shift, and go to state 11
    WHILE  shift, and go to state 12
    ID     shift, and go to state 13

    stmt_list  go to state 70
    stmt       go to state 15


State 69

   16 stmt: WHILE '(' expr ')' THEN . stmt_list ENDWHILE

    READ   shift, and go to state 9
    WRITE  shift, and go to state 10
    IF     shift, and go to state 11
    WHILE  shift, and go to state 12
    ID     shift, and go to state 13

    stmt_list  go to state 71
    stmt       go to state 15


State 70

    9 stmt_list: stmt_list . stmt ';'
   14 stmt: IF '(' expr ')' THEN stmt_list . ENDIF
   15     | IF '(' expr ')' THEN stmt_list . ELSE stmt_list ENDIF

    READ   shift, and go to state 9
    WRITE  shift, and go to state 10
    IF     shift, and go to state 11
    ELSE   shift, and go to state 72
    ENDIF  shift, and go to state 73
    WHILE  shift, and go to state 12
    ID     shift, and go to state 13

    stmt  go to state 27


State 71

    9 stmt_list: stmt_list . stmt ';'
   16 stmt: WHILE '(' expr ')' THEN stmt_list . ENDWHILE

    READ      shift, and go to state 9
    WRITE     shift, and go to state 10
    IF        shift, and go to state 11
    WHILE     shift, and go to state 12
    ENDWHILE  shift, and go to state 74
    ID        shift, and go to state 13

    stmt  go to state 27


State 72

   15 stmt: IF '(' expr ')' THEN stmt_list ELSE . stmt_list ENDIF

    READ   shift, and go to state 9
    WRITE  shift, and go to state 10
    IF     shift, and go to state 11
    WHILE  shift, and go to state 12
    ID     shift, and go to state 13

    stmt_list  go to state 75
    stmt       go to state 15


State 73

   14 stmt: IF '(' expr ')' THEN stmt_list ENDIF .

    $default  reduce using rule 14 (stmt)


State 74

   16 stmt: WHILE '(' expr ')' THEN stmt_list ENDWHILE .

    $default  reduce using rule 16 (stmt)


State 75

    9 stmt_list: stmt_list . stmt ';'
   15 stmt: IF '(' expr ')' THEN stmt_list ELSE stmt_list . ENDIF

    READ   shift, and go to state 9
    WRITE  shift, and go to state 10
    IF     shift, and go to state 11
    ENDIF  shift, and go to state 76
    WHILE  shift, and go to state 12
    ID     shift, and go to state 13

    stmt  go to state 27


State 76

   15 stmt: IF '(' expr ')' THEN stmt_list ELSE stmt_list ENDIF .

    $default  reduce using rule 15 (stmt)

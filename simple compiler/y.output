Terminals unused in grammar

   MUL
   DIV


Grammar

    0 $accept: program $end

    1 program: expr ';' '\n'
    2        | stmt_list '\n'
    3        | %empty

    4 stmt_list: stmt_list stmt ';'
    5          | stmt ';'

    6 stmt: ID ASGN expr
    7     | READ '(' ID ')'
    8     | WRITE '(' expr ')'

    9 expr: NUM
   10     | ID
   11     | expr PLUS expr
   12     | expr MINUS expr
   13     | expr L expr
   14     | expr G expr
   15     | expr LE expr
   16     | expr GE expr
   17     | expr EQ expr
   18     | expr NE expr
   19     | '(' expr ')'
   20     | IF '(' expr ')' THEN stmt_list ENDIF
   21     | IF '(' expr ')' THEN stmt_list ELSE stmt_list ENDIF


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 1 2
'(' (40) 7 8 19 20 21
')' (41) 7 8 19 20 21
';' (59) 1 4 5
error (256)
MUL (258)
PLUS (259) 11
MINUS (260) 12
DIV (261)
READ (262) 7
WRITE (263) 8
ASGN (264) 6
IF (265) 20 21
THEN (266) 20 21
ELSE (267) 21
ENDIF (268) 20 21
L (269) 13
G (270) 14
LE (271) 15
GE (272) 16
NE (273) 18
EQ (274) 17
NUM (275) 9
ID (276) 6 7 10


Nonterminals, with rules where they appear

$accept (26)
    on left: 0
program (27)
    on left: 1 2 3, on right: 0
stmt_list (28)
    on left: 4 5, on right: 2 4 20 21
stmt (29)
    on left: 6 7 8, on right: 4 5
expr (30)
    on left: 9 10 11 12 13 14 15 16 17 18 19 20 21, on right: 1 6 8
    11 12 13 14 15 16 17 18 19 20 21


State 0

    0 $accept: . program $end

    READ   shift, and go to state 1
    WRITE  shift, and go to state 2
    IF     shift, and go to state 3
    NUM    shift, and go to state 4
    ID     shift, and go to state 5
    '('    shift, and go to state 6

    $default  reduce using rule 3 (program)

    program    go to state 7
    stmt_list  go to state 8
    stmt       go to state 9
    expr       go to state 10


State 1

    7 stmt: READ . '(' ID ')'

    '('  shift, and go to state 11


State 2

    8 stmt: WRITE . '(' expr ')'

    '('  shift, and go to state 12


State 3

   20 expr: IF . '(' expr ')' THEN stmt_list ENDIF
   21     | IF . '(' expr ')' THEN stmt_list ELSE stmt_list ENDIF

    '('  shift, and go to state 13


State 4

    9 expr: NUM .

    $default  reduce using rule 9 (expr)


State 5

    6 stmt: ID . ASGN expr
   10 expr: ID .

    ASGN  shift, and go to state 14

    $default  reduce using rule 10 (expr)


State 6

   19 expr: '(' . expr ')'

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 16


State 7

    0 $accept: program . $end

    $end  shift, and go to state 17


State 8

    2 program: stmt_list . '\n'
    4 stmt_list: stmt_list . stmt ';'

    READ   shift, and go to state 1
    WRITE  shift, and go to state 2
    ID     shift, and go to state 18
    '\n'   shift, and go to state 19

    stmt  go to state 20


State 9

    5 stmt_list: stmt . ';'

    ';'  shift, and go to state 21


State 10

    1 program: expr . ';' '\n'
   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   13     | expr . L expr
   14     | expr . G expr
   15     | expr . LE expr
   16     | expr . GE expr
   17     | expr . EQ expr
   18     | expr . NE expr

    PLUS   shift, and go to state 22
    MINUS  shift, and go to state 23
    L      shift, and go to state 24
    G      shift, and go to state 25
    LE     shift, and go to state 26
    GE     shift, and go to state 27
    NE     shift, and go to state 28
    EQ     shift, and go to state 29
    ';'    shift, and go to state 30


State 11

    7 stmt: READ '(' . ID ')'

    ID  shift, and go to state 31


State 12

    8 stmt: WRITE '(' . expr ')'

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 32


State 13

   20 expr: IF '(' . expr ')' THEN stmt_list ENDIF
   21     | IF '(' . expr ')' THEN stmt_list ELSE stmt_list ENDIF

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 33


State 14

    6 stmt: ID ASGN . expr

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 34


State 15

   10 expr: ID .

    $default  reduce using rule 10 (expr)


State 16

   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   13     | expr . L expr
   14     | expr . G expr
   15     | expr . LE expr
   16     | expr . GE expr
   17     | expr . EQ expr
   18     | expr . NE expr
   19     | '(' expr . ')'

    PLUS   shift, and go to state 22
    MINUS  shift, and go to state 23
    L      shift, and go to state 24
    G      shift, and go to state 25
    LE     shift, and go to state 26
    GE     shift, and go to state 27
    NE     shift, and go to state 28
    EQ     shift, and go to state 29
    ')'    shift, and go to state 35


State 17

    0 $accept: program $end .

    $default  accept


State 18

    6 stmt: ID . ASGN expr

    ASGN  shift, and go to state 14


State 19

    2 program: stmt_list '\n' .

    $default  reduce using rule 2 (program)


State 20

    4 stmt_list: stmt_list stmt . ';'

    ';'  shift, and go to state 36


State 21

    5 stmt_list: stmt ';' .

    $default  reduce using rule 5 (stmt_list)


State 22

   11 expr: expr PLUS . expr

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 37


State 23

   12 expr: expr MINUS . expr

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 38


State 24

   13 expr: expr L . expr

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 39


State 25

   14 expr: expr G . expr

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 40


State 26

   15 expr: expr LE . expr

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 41


State 27

   16 expr: expr GE . expr

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 42


State 28

   18 expr: expr NE . expr

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 43


State 29

   17 expr: expr EQ . expr

    IF   shift, and go to state 3
    NUM  shift, and go to state 4
    ID   shift, and go to state 15
    '('  shift, and go to state 6

    expr  go to state 44


State 30

    1 program: expr ';' . '\n'

    '\n'  shift, and go to state 45


State 31

    7 stmt: READ '(' ID . ')'

    ')'  shift, and go to state 46


State 32

    8 stmt: WRITE '(' expr . ')'
   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   13     | expr . L expr
   14     | expr . G expr
   15     | expr . LE expr
   16     | expr . GE expr
   17     | expr . EQ expr
   18     | expr . NE expr

    PLUS   shift, and go to state 22
    MINUS  shift, and go to state 23
    L      shift, and go to state 24
    G      shift, and go to state 25
    LE     shift, and go to state 26
    GE     shift, and go to state 27
    NE     shift, and go to state 28
    EQ     shift, and go to state 29
    ')'    shift, and go to state 47


State 33

   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   13     | expr . L expr
   14     | expr . G expr
   15     | expr . LE expr
   16     | expr . GE expr
   17     | expr . EQ expr
   18     | expr . NE expr
   20     | IF '(' expr . ')' THEN stmt_list ENDIF
   21     | IF '(' expr . ')' THEN stmt_list ELSE stmt_list ENDIF

    PLUS   shift, and go to state 22
    MINUS  shift, and go to state 23
    L      shift, and go to state 24
    G      shift, and go to state 25
    LE     shift, and go to state 26
    GE     shift, and go to state 27
    NE     shift, and go to state 28
    EQ     shift, and go to state 29
    ')'    shift, and go to state 48


State 34

    6 stmt: ID ASGN expr .
   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   13     | expr . L expr
   14     | expr . G expr
   15     | expr . LE expr
   16     | expr . GE expr
   17     | expr . EQ expr
   18     | expr . NE expr

    PLUS   shift, and go to state 22
    MINUS  shift, and go to state 23
    L      shift, and go to state 24
    G      shift, and go to state 25
    LE     shift, and go to state 26
    GE     shift, and go to state 27
    NE     shift, and go to state 28
    EQ     shift, and go to state 29

    $default  reduce using rule 6 (stmt)


State 35

   19 expr: '(' expr ')' .

    $default  reduce using rule 19 (expr)


State 36

    4 stmt_list: stmt_list stmt ';' .

    $default  reduce using rule 4 (stmt_list)


State 37

   11 expr: expr . PLUS expr
   11     | expr PLUS expr .
   12     | expr . MINUS expr
   13     | expr . L expr
   14     | expr . G expr
   15     | expr . LE expr
   16     | expr . GE expr
   17     | expr . EQ expr
   18     | expr . NE expr

    $default  reduce using rule 11 (expr)


State 38

   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   12     | expr MINUS expr .
   13     | expr . L expr
   14     | expr . G expr
   15     | expr . LE expr
   16     | expr . GE expr
   17     | expr . EQ expr
   18     | expr . NE expr

    $default  reduce using rule 12 (expr)


State 39

   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   13     | expr . L expr
   13     | expr L expr .
   14     | expr . G expr
   15     | expr . LE expr
   16     | expr . GE expr
   17     | expr . EQ expr
   18     | expr . NE expr

    PLUS   shift, and go to state 22
    MINUS  shift, and go to state 23

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 13 (expr)


State 40

   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   13     | expr . L expr
   14     | expr . G expr
   14     | expr G expr .
   15     | expr . LE expr
   16     | expr . GE expr
   17     | expr . EQ expr
   18     | expr . NE expr

    PLUS   shift, and go to state 22
    MINUS  shift, and go to state 23

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 14 (expr)


State 41

   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   13     | expr . L expr
   14     | expr . G expr
   15     | expr . LE expr
   15     | expr LE expr .
   16     | expr . GE expr
   17     | expr . EQ expr
   18     | expr . NE expr

    PLUS   shift, and go to state 22
    MINUS  shift, and go to state 23

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 15 (expr)


State 42

   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   13     | expr . L expr
   14     | expr . G expr
   15     | expr . LE expr
   16     | expr . GE expr
   16     | expr GE expr .
   17     | expr . EQ expr
   18     | expr . NE expr

    PLUS   shift, and go to state 22
    MINUS  shift, and go to state 23

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 16 (expr)


State 43

   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   13     | expr . L expr
   14     | expr . G expr
   15     | expr . LE expr
   16     | expr . GE expr
   17     | expr . EQ expr
   18     | expr . NE expr
   18     | expr NE expr .

    PLUS   shift, and go to state 22
    MINUS  shift, and go to state 23

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 18 (expr)


State 44

   11 expr: expr . PLUS expr
   12     | expr . MINUS expr
   13     | expr . L expr
   14     | expr . G expr
   15     | expr . LE expr
   16     | expr . GE expr
   17     | expr . EQ expr
   17     | expr EQ expr .
   18     | expr . NE expr

    PLUS   shift, and go to state 22
    MINUS  shift, and go to state 23

    L   error (nonassociative)
    G   error (nonassociative)
    LE  error (nonassociative)
    GE  error (nonassociative)
    NE  error (nonassociative)
    EQ  error (nonassociative)

    $default  reduce using rule 17 (expr)


State 45

    1 program: expr ';' '\n' .

    $default  reduce using rule 1 (program)


State 46

    7 stmt: READ '(' ID ')' .

    $default  reduce using rule 7 (stmt)


State 47

    8 stmt: WRITE '(' expr ')' .

    $default  reduce using rule 8 (stmt)


State 48

   20 expr: IF '(' expr ')' . THEN stmt_list ENDIF
   21     | IF '(' expr ')' . THEN stmt_list ELSE stmt_list ENDIF

    THEN  shift, and go to state 49


State 49

   20 expr: IF '(' expr ')' THEN . stmt_list ENDIF
   21     | IF '(' expr ')' THEN . stmt_list ELSE stmt_list ENDIF

    READ   shift, and go to state 1
    WRITE  shift, and go to state 2
    ID     shift, and go to state 18

    stmt_list  go to state 50
    stmt       go to state 9


State 50

    4 stmt_list: stmt_list . stmt ';'
   20 expr: IF '(' expr ')' THEN stmt_list . ENDIF
   21     | IF '(' expr ')' THEN stmt_list . ELSE stmt_list ENDIF

    READ   shift, and go to state 1
    WRITE  shift, and go to state 2
    ELSE   shift, and go to state 51
    ENDIF  shift, and go to state 52
    ID     shift, and go to state 18

    stmt  go to state 20


State 51

   21 expr: IF '(' expr ')' THEN stmt_list ELSE . stmt_list ENDIF

    READ   shift, and go to state 1
    WRITE  shift, and go to state 2
    ID     shift, and go to state 18

    stmt_list  go to state 53
    stmt       go to state 9


State 52

   20 expr: IF '(' expr ')' THEN stmt_list ENDIF .

    $default  reduce using rule 20 (expr)


State 53

    4 stmt_list: stmt_list . stmt ';'
   21 expr: IF '(' expr ')' THEN stmt_list ELSE stmt_list . ENDIF

    READ   shift, and go to state 1
    WRITE  shift, and go to state 2
    ENDIF  shift, and go to state 54
    ID     shift, and go to state 18

    stmt  go to state 20


State 54

   21 expr: IF '(' expr ')' THEN stmt_list ELSE stmt_list ENDIF .

    $default  reduce using rule 21 (expr)
